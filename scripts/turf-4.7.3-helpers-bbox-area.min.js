(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function geometry(e){var r,t=0;switch(e.type){case"Polygon":return polygonArea(e.coordinates);case"MultiPolygon":for(r=0;r<e.coordinates.length;r++)t+=polygonArea(e.coordinates[r]);return t;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(r=0;r<e.geometries.length;r++)t+=geometry(e.geometries[r]);return t}}function polygonArea(e){var r=0;if(e&&e.length>0){r+=Math.abs(ringArea(e[0]));for(var t=1;t<e.length;t++)r-=Math.abs(ringArea(e[t]))}return r}function ringArea(e){var r,t,n,o,a,i,g,s=0,l=e.length;if(l>2){for(g=0;g<l;g++)g===l-2?(o=l-2,a=l-1,i=0):g===l-1?(o=l-1,a=0,i=1):(o=g,a=g+1,i=g+2),r=e[o],t=e[a],n=e[i],s+=(rad(n[0])-rad(r[0]))*Math.sin(rad(t[1]));s=s*wgs84.RADIUS*wgs84.RADIUS/2}return s}function rad(e){return e*Math.PI/180}var wgs84=require("wgs84");module.exports.geometry=geometry,module.exports.ring=ringArea;
},{"wgs84":6}],2:[function(require,module,exports){
var area=require("@mapbox/geojson-area").geometry,geomReduce=require("@turf/meta").geomReduce;module.exports=function(e){return geomReduce(e,function(e,r){return e+area(r)},0)};

},{"@mapbox/geojson-area":1,"@turf/meta":5}],3:[function(require,module,exports){
var coordEach=require("@turf/meta").coordEach;module.exports=function(r){var o=[1/0,1/0,-1/0,-1/0];return coordEach(r,function(r){o[0]>r[0]&&(o[0]=r[0]),o[1]>r[1]&&(o[1]=r[1]),o[2]<r[0]&&(o[2]=r[0]),o[3]<r[1]&&(o[3]=r[1])}),o};
},{"@turf/meta":5}],4:[function(require,module,exports){
function feature(r,e,t,o){if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(o&&-1===["string","number"].indexOf(typeof o))throw new Error("id must be a number or a string");var n={type:"Feature"};return o&&(n.id=o),t&&(n.bbox=t),n.properties=e||{},n.geometry=r,n}function geometry(r,e,t){if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");var o;switch(r){case"Point":o=point(e).geometry;break;case"LineString":o=lineString(e).geometry;break;case"Polygon":o=polygon(e).geometry;break;case"MultiPoint":o=multiPoint(e).geometry;break;case"MultiLineString":o=multiLineString(e).geometry;break;case"MultiPolygon":o=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return t&&(o.bbox=t),o}function point(r,e,t,o){if(!r)throw new Error("No coordinates passed");if(void 0===r.length)throw new Error("Coordinates must be an array");if(r.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("Coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t,o)}function polygon(r,e,t,o){if(!r)throw new Error("No coordinates passed");for(var n=0;n<r.length;n++){var i=r[n];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++){if(0===n&&0===a&&!isNumber(i[0][0])||!isNumber(i[0][1]))throw new Error("Coordinates must contain numbers");if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t,o)}function lineString(r,e,t,o){if(!r)throw new Error("No coordinates passed");if(r.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("Coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t,o)}function featureCollection(r,e,t){if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");if(e&&4!==e.length)throw new Error("bbox must be an Array of 4 numbers");if(t&&-1===["string","number"].indexOf(typeof t))throw new Error("id must be a number or a string");var o={type:"FeatureCollection"};return t&&(o.id=t),e&&(o.bbox=e),o.features=r,o}function multiLineString(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:r},e,t,o)}function multiPoint(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:r},e,t,o)}function multiPolygon(r,e,t,o){if(!r)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:r},e,t,o)}function geometryCollection(r,e,t,o){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t,o)}function round(r,e){if(void 0===r||null===r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToDistance(r,e){if(void 0===r||null===r)throw new Error("radians is required");var t=factors[e||"kilometers"];if(!t)throw new Error("units is invalid");return r*t}function distanceToRadians(r,e){if(void 0===r||null===r)throw new Error("distance is required");var t=factors[e||"kilometers"];if(!t)throw new Error("units is invalid");return r/t}function distanceToDegrees(r,e){return radians2degrees(distanceToRadians(r,e))}function bearingToAngle(r){if(null===r||void 0===r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radians2degrees(r){if(null===r||void 0===r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function degrees2radians(r){if(null===r||void 0===r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertDistance(r,e,t){if(null===r||void 0===r)throw new Error("distance is required");if(!(r>=0))throw new Error("distance must be a positive number");return radiansToDistance(distanceToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null===r||void 0===r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var n=areaFactors[t||"kilometers"];if(!n)throw new Error("invalid final units");return r/o*n}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},areaFactors={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};module.exports={feature:feature,geometry:geometry,featureCollection:featureCollection,geometryCollection:geometryCollection,point:point,multiPoint:multiPoint,lineString:lineString,multiLineString:multiLineString,polygon:polygon,multiPolygon:multiPolygon,radiansToDistance:radiansToDistance,distanceToRadians:distanceToRadians,distanceToDegrees:distanceToDegrees,radians2degrees:radians2degrees,degrees2radians:degrees2radians,bearingToAngle:bearingToAngle,convertDistance:convertDistance,convertArea:convertArea,round:round,isNumber:isNumber};

},{}],5:[function(require,module,exports){
"use strict";function coordEach(e,t,r){if(null!==e){var o,n,i,a,c,u,l,s,f,g,p=0,h=0,d=e.type,y="FeatureCollection"===d,m="Feature"===d,E=y?e.features.length:1;for(o=0;o<E;o++)for(f=y?e.features[o].geometry:m?e.geometry:e,g=!!f&&"GeometryCollection"===f.type,l=g?f.geometries.length:1,n=0;n<l;n++){var v=0;if(null!==(u=g?f.geometries[n]:f)){s=u.coordinates;var w=u.type;switch(p=!r||"Polygon"!==w&&"MultiPolygon"!==w?0:1,w){case null:break;case"Point":t(s,h,o,v),h++,v++;break;case"LineString":case"MultiPoint":for(i=0;i<s.length;i++)t(s[i],h,o,v),h++,"MultiPoint"===w&&v++;"LineString"===w&&v++;break;case"Polygon":case"MultiLineString":for(i=0;i<s.length;i++){for(a=0;a<s[i].length-p;a++)t(s[i][a],h,o,v),h++;"MultiLineString"===w&&v++}"Polygon"===w&&v++;break;case"MultiPolygon":for(i=0;i<s.length;i++){for(a=0;a<s[i].length;a++)for(c=0;c<s[i][a].length-p;c++)t(s[i][a][c],h,o,v),h++;v++}break;case"GeometryCollection":for(i=0;i<u.geometries.length;i++)coordEach(u.geometries[i],t,r);break;default:throw new Error("Unknown Geometry Type")}}}}}function coordReduce(e,t,r,o){var n=r;return coordEach(e,function(e,o,i,a){n=0===o&&void 0===r?e:t(n,e,o,i,a)},o),n}function propEach(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length;r++)t(e.features[r].properties,r);break;case"Feature":t(e.properties,0)}}function propReduce(e,t,r){var o=r;return propEach(e,function(e,n){o=0===n&&void 0===r?e:t(o,e,n)}),o}function featureEach(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)t(e.features[r],r)}function featureReduce(e,t,r){var o=r;return featureEach(e,function(e,n){o=0===n&&void 0===r?e:t(o,e,n)}),o}function coordAll(e){var t=[];return coordEach(e,function(e){t.push(e)}),t}function geomEach(e,t){var r,o,n,i,a,c,u,l,s=0,f="FeatureCollection"===e.type,g="Feature"===e.type,p=f?e.features.length:1;for(r=0;r<p;r++){for(c=f?e.features[r].geometry:g?e.geometry:e,l=f?e.features[r].properties:g?e.properties:{},u=!!c&&"GeometryCollection"===c.type,a=u?c.geometries.length:1,n=0;n<a;n++)if(null!==(i=u?c.geometries[n]:c))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":t(i,s,l);break;case"GeometryCollection":for(o=0;o<i.geometries.length;o++)t(i.geometries[o],s,l);break;default:throw new Error("Unknown Geometry Type")}else t(null,s,l);s++}}function geomReduce(e,t,r){var o=r;return geomEach(e,function(e,n,i){o=0===n&&void 0===r?e:t(o,e,n,i)}),o}function flattenEach(e,t){geomEach(e,function(e,r,o){var n=null===e?null:e.type;switch(n){case null:case"Point":case"LineString":case"Polygon":return void t(feature(e,o),r,0)}var i;switch(n){case"MultiPoint":i="Point";break;case"MultiLineString":i="LineString";break;case"MultiPolygon":i="Polygon"}e.coordinates.forEach(function(e,n){t(feature({type:i,coordinates:e},o),r,n)})})}function flattenReduce(e,t,r){var o=r;return flattenEach(e,function(e,n,i){o=0===n&&0===i&&void 0===r?e:t(o,e,n,i)}),o}function segmentEach(e,t){flattenEach(e,function(e,r,o){var n=0;if(e.geometry){var i=e.geometry.type;"Point"!==i&&"MultiPoint"!==i&&coordReduce(e,function(i,a){var c=lineString([i,a],e.properties);return t(c,r,o,n),n++,a})}})}function segmentReduce(e,t,r){var o=r,n=!1;return segmentEach(e,function(e,i,a,c){o=!1===n&&void 0===r?e:t(o,e,i,a,c),n=!0}),o}function feature(e,t){if(void 0===e)throw new Error("No geometry passed");return{type:"Feature",properties:t||{},geometry:e}}function lineString(e,t){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");return{type:"Feature",properties:t||{},geometry:{type:"LineString",coordinates:e}}}function lineEach(e,t){if(!e)throw new Error("geojson is required");var r=e.geometry?e.geometry.type:e.type;if(!r)throw new Error("invalid geojson");if("FeatureCollection"===r)throw new Error("FeatureCollection is not supported");if("GeometryCollection"===r)throw new Error("GeometryCollection is not supported");var o=e.geometry?e.geometry.coordinates:e.coordinates;if(!o)throw new Error("geojson must contain coordinates");switch(r){case"LineString":return void t(o,0,0);case"Polygon":case"MultiLineString":for(var n=0,i=0;i<o.length;i++)"MultiLineString"===r&&(n=i),t(o[i],i,n);return;case"MultiPolygon":for(var a=0;a<o.length;a++)for(var c=0;c<o[a].length;c++)t(o[a][c],c,a);return;default:throw new Error(r+" geometry not supported")}}function lineReduce(e,t,r){var o=r;return lineEach(e,function(e,n,i){o=0===n&&void 0===r?e:t(o,e,n,i)}),o}Object.defineProperty(exports,"__esModule",{value:!0}),exports.coordEach=coordEach,exports.coordReduce=coordReduce,exports.propEach=propEach,exports.propReduce=propReduce,exports.featureEach=featureEach,exports.featureReduce=featureReduce,exports.coordAll=coordAll,exports.geomEach=geomEach,exports.geomReduce=geomReduce,exports.flattenEach=flattenEach,exports.flattenReduce=flattenReduce,exports.segmentEach=segmentEach,exports.segmentReduce=segmentReduce,exports.feature=feature,exports.lineString=lineString,exports.lineEach=lineEach,exports.lineReduce=lineReduce;

},{}],6:[function(require,module,exports){
module.exports.RADIUS=6378137,module.exports.FLATTENING=1/298.257223563,module.exports.POLAR_RADIUS=6356752.3142;
},{}],7:[function(require,module,exports){
module.exports={bbox:require("@turf/bbox"),area:require("@turf/area"),helpers:require("@turf/helpers")};
},{"@turf/area":2,"@turf/bbox":3,"@turf/helpers":4}]},{},[7])(7)
});